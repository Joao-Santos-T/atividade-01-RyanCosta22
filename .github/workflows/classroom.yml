name: Análise de Testes

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9]

    steps:
    - uses: actions/checkout@v2
    
    - name: Configurar Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Instalar dependências
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov
        
    - name: Executar testes com cobertura
      run: |
        pytest --cov=./ --cov-report=xml
        
    - name: Upload cobertura para Codecov
      uses: codecov/codecov-action@v2
      with:
        file: ./coverage.xml
        fail_ci_if_error: true
        
    - name: Analisar resultados dos testes
      run: |
        python -c "
import xml.etree.ElementTree as ET
import json
import subprocess

# Ler o arquivo de cobertura
tree = ET.parse('coverage.xml')
root = tree.getroot()

# Calcular cobertura
line_rate = float(root.attrib['line-rate'])
coverage_percentage = line_rate * 100

# Rodar pytest e gerar resultados
subprocess.run(['pytest', '--junitxml=test-results.xml'], check=True)

# Ler resultados de testes
tree = ET.parse('test-results.xml')
root = tree.getroot()
total_tests = int(root.attrib['tests'])
failed_tests = int(root.attrib['failures'])
passed_tests = total_tests - failed_tests
pass_percentage = (passed_tests / total_tests) * 100 if total_tests > 0 else 0

# Criar relatório
report = {
    'cobertura': round(coverage_percentage, 2),
    'testes_passados': passed_tests,
    'testes_falhados': failed_tests,
    'total_testes': total_tests,
    'porcentagem_passados': round(pass_percentage, 2)
}

# Salvar relatório
with open('test-report.json', 'w') as f:
    json.dump(report, f, indent=2)
        "
        
    - name: Upload relatório
      uses: actions/upload-artifact@v2
      with:
        name: test-report
        path: test-report.json
